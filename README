University of Cambridge Web Authentication System
=================================================

Apache Authentication Agent (mod_ucam_webauth) Documentation
============================================================

Current with version 0.99_1.0.0rc5
$Id: README,v 1.10 2004-07-12 14:22:36 jw35 Exp $

1. Installation
===============

The University of Cambridge Web Authentication System Apache
Authentication Agent ('mod_ucam_webauth' or just 'the module' in what
follows) can be linked to Apache in two ways, either statically or
dynamically. Dynamically linking the module has the advantage of not
requiring the Apache server to be rebuilt, although it does require
that support for dynamic shared objects (DSO) be already incorporated
in the server. Dynamic linking also engenders a decrease in Apache's
performance relative to static linking. See the bottom of
http://httpd.apache.org/docs/dso.html for a summary of the advantages
and disadvantages of dynamic linking. If you are unsure about
rebuilding Apache then dynamic linking is recommended.

In the following documentation PREFIX is the directory where Apache
resides, e.g.  /usr/local/apache

The module supports versions 1.3 and 2 of Apache. If you have an
existing Apache installation and are unsure of the version you can use

	PREFIX/bin/httpd -v

to determine your version of Apache.

1.1. Requirements
-----------------

Building the module either statically or dynamically requires the
OpenSSL library. Note that the module only provides authentication, so
an authorization module (such as the standard mod_auth module) must
also be loaded.

1.2. RSA Public Keys
--------------------

The module uses RSA public keys to verify that any messages from the
authentication server really were sent by it and are not some attempt
by a third-party to gain access to protected resources. The public
keys require are available from https://raven.cam.ac.uk/project/keys/
and should be placed in the PREFIX/conf/webauth_keys directory, which
you will have to create. If for some reason this is not an appropriate
location for the keys on your system a different directory can be
defined. See the 'Configuration' section below for more details. The
names of the key files should not be changed - beware that they have
no filename suffix but that some browsers may add .txt or similar when
downloading them.

1.2. Installing using Dynamic Linking
-------------------------------------

The apxs tool can be used to build and install the module without
rebuilding the Apache server. However the server must have been built
with shared object support. This can be checked by using the following
command

	PREFIX/bin/httpd -l

to list the modules linked to the Apache server - if mod_so.c is shown
as loaded then shared object support is available. If mod_so.c is not
present then a rebuild of your Apache server is required, either to
enable shared object support or to statically link mod_ucam_webauth to
your server.

The simplest command for building the module dynamically is:

	PREFIX/bin/apxs -c -lcrypto mod_ucam_webauth.c

This compiles the module as a shared object, but does not make Apache
aware of its presence. To do this the compiled module file
mod_ucam_webauth.so must first be copied to the directory where Apache
stores shared modules. This may be PREFIX/modules, depending on the
Apache's directory layout.  Then httpd.conf configuration file must be
updated with the configuration directives required to load and
activate the module.

For Apache 1.3 two directives must be added, first LoadModule, then
AddModule.  The order in which modules are loaded and add added using
these directives in httpd.conf is significant since it determines
which modules may override others' behaviour. Modules that are added
later have priority over those loaded before them. Generally the
Ucam-WebAuth module can be loaded and added after the other
modules. The modules must be loaded and added in the same order. The
LoadModule and AddModule directives for the module are

	LoadModule ucam_webauth_module modules/mod_ucam_webauth.so
	AddModule mod_ucam_webauth.c

Loading the module for Apache 2 is much simpler than for Apache 1.3,
since the modules themselves specify their ordering. Only the
LoadModule configuration directive needs to be added to httpd.conf:

	LoadModule ucam_webauth_module modules/mod_ucam_webauth.so

The apxs tool can be instructed to move the compiled module to the
correct directory in addition to compiling it:

        PREFIX/bin/apxs -c -i -lcrypto mod_ucam_webauth.c

or even to compile it, move it into place and attempt to alter
httpd.conf automatically:

	PREFIX/bin/apxs -c -i -a -lcrypto mod_ucam_webauth.c

1.3. Installing using Static Linking
------------------------------------

Remove or backup the previous Apache build. Change into the Apache
build directory and copy the appropriate source file to
src/modules/extra Apache 1.3 or modules/aaa for Apache 2. Run the
configure script with the activate-module and enable-module options as
specified below in addition to any other options you wish to set,
e.g. for an Apache 1.3 installation:

	./configure --prefix=PREFIX \
	--activate-module=src/modules/extra/mod_ucam_webauth.c \
	--enable-module=ucam_webauth

For an Apache 2 installation the options you supply are slightly different:

	./configure --prefix=PREFIX \
	--enable-ucam_webauth

Issue the commands to build and install Apache in the usual way:

	make
	make install

Use the command

	PREFIX/bin/httpd -l

to check that the module has been successfully incorporated into the
Apache server. It should be listed as mod_ucam_webauth.c.

2. Configuration
================

The minimum configuration required to restrict access to resources to
users with a Ucam-WebAuth login is, e.g.

	<Location "/protected_dir/">
		AuthType WebAuth
		Require valid-user
		AACookieKey some random string
	</Location>

This assumes that the Apache standard mod_auth module is also
available since it provides checking of 'Require
valid-user'. mod_ucam_webauth always requires some other module (often
mod_auth) to provide 'Authorization' checking.

As an alternative, this example will allow access to resources to
users with a Ucam-WebAuth login or to client computers with names in
the cam.ac.uk zone but not otherwise:

        <Location "/protected_dir/">
                Order allow,deny
                Allow from .cam.ac.uk
		AuthType WebAuth
		Require valid-user
		Satisfy any
		AACookieKey "some random string"
	</Location>

Here the resources to be protected are identified by the <Location>
directive; resources specified by the <Directory> or <Files>
directives can also be protected. 'AuthType' must be set to
'WebAuth'. A 'Require' directive is also needed to ensure that only
authenticated users are allowed access to the resource.

The final directive required for this simple configuration is
'AACookieKey'. This directive is specific to this module and provides
data used to sign and verify session cookies, providing detection of
any cookie tampering. There is no default for this directive, and it
must be set to some random string. The value must be protected since
with knowledge of the key an attacker can forge authentication. For
preference, AACookieKey should be placed in a file that is only
readable by the user used to start Apache, commonly root.

2.1. Configuration Directives
-----------------------------

Apart from AACookieKey the configuration directives specific to the
module module are optional. However if the server's clock is not NTP
synchronised then AAClockSkew will also need to be set. All directive
values need to be quoted if they contain spaces. All values can be set
in .htaccess files if 'AllowOverride AuthConfig' is in effect. Values
are inherited into <VirtualHost>, <Directory>, <Location> and <File>
blocks, and in .htaccess files, if not specified there.

AAAuthService

The full URL for the web login service to be used. Defaults to
https://raven.cam.ac.uk/auth/authenticate.html

AALogoutService

The full URL for the logout page on the web login service to be
used. Defaults to https://raven.cam.ac.uk/auth/logout.html

AADescription

A text description of the resource that is requesting
authentication. This may be displayed to the user by the
authentication service. It is restricted to printable ASCII characters
(0x20 - 0x7e) though it may contain HTML entities representing other
characters. The characters '<' and '>' will be converted into HTML
entities before being sent to the browser and so this text can not
usefully contain HTML markup. This value must be quoted if, as it
likely, it contains spaces.

AAResponseTimeout

Responses from the central authentication server are
time-stamped. This parameter sets the period of time during which
these responses are considered valid. The value is in seconds and the
default is 30.

AAClockSkew

Interpretation of AAResponseTimeout is difficult if the clocks on the
server running this handler and on the authentication server are out
of step. Web servers should use NTP to synchronise their clocks, but
if they don't then this parameter MUST be set to an estimate of the
maximum expected difference between them (in seconds). Error messages
containing the text 'local clock incorrect?'  are likely if this
parameter is not used on a server that needs it. The default is 0
seconds.

AAKeyDir

The name of a directory containing the public key(s) required to
validate authentication responses sent by the server. If this name
does not start with '/' then it is interpreted relative to
DocumentRoot. Default 'conf/webauth_keys'.

AAMaxSessionLife

The maximum period of time (in seconds) for which an established
session will be valid. This may be overridden if the authentication
reply contains a shorter 'life' parameter. Once a session ceases to be
valid users will be referred to the web login service to
re-authenticate. Note that this does NOT define an expiry time for
the session cookie - session cookies are always set without an expiry
time, causing them to expire when the browser session
finishes. Default is 7200 seconds (2 hours).

AAInactiveTimeout

The length of time (in seconds) after which an inactive session can be
assumed to have expired. Inactivity tracking is rather approximate
thanks to various forms of caching. In particular, revisiting a page
that hasn't change since you last visited it may not count as
activity. Setting AACacheControl to 'paranoid' may help with this, at
the expense of increased network traffic and delays. If set to 0 (the
default) this feature is disabled. Disabling the feature when not
needed provides a minor efficiency gain.

AATimeoutMsg

A re-authentication by the authentication service will be triggered
when an established session expires. This option sets a text string,
default 'your session on the site has expired', which is sent to the
authentication server to explain to the user why they are being asked
to authenticate again. HTML markup is suppressed as for AADescription
above.

AACacheControl

Caches, both those in browsers and shared proxy caches, can cause
problems for cookie-based authentication systems. This option controls
what the module does to work around this. It has three possible
settings:

  Off:      No additional headers are sent
  On:       Headers are automatically sent that should disable most
            shared caching
  Paranoid: Almost everything possible is done to discourage re-use
            of cached content. This will increase server load, network
            traffic and delays experienced by users. 

Default value is 'On'.

AACookieKey

A random key used to protect session cookies from tampering. Any
reasonably unpredictable string (for example an md5sum of a rapidly
changing logfile) will be satisfactory. This key must be the same for
all uses of the Web Authentication system that will receive the same
session cookies (see AACookieName, AACookiePath, AACookieDomain
below). This parameter has no default and must be set. 

The key must not disclosed, since with knowledge of the key an
attacker can forge authentication. For preference, AACookieKey should
be placed in a file that is only readable by the user used to start
Apache, commonly root. One way to achieve this, while leaving the main
configuration file mainly readable, would be to put the AACookieKey
directive in a file only readable by root (or whoever) that is
incorporated into the main configuration using the 'Include'
directive.

AACookieName

The name used for the session cookie. When used for access to
resources over https the string '-S' is appended to this name. The
default is 'Ucam-WebAuth-Session'.

AACookiePath

The 'Path' attribute for the session_cookie. The default is '/' which
should cause the cookie to be returned in response to all requests for
this server. Be sure to set this path so that it includes all the URLs
being protected. For example

    <Location /protected>
      AACookieKey foobar
      AACookiePath /protected/
    </location>

will cause problems when a browser tries to access
http://<whatever/protected> since authentication will be required but
the relevant cookie will never be returned. Note that an .htaccess
file and a Directory block even with a training '/' at least
sometimes behave as for a Location block with a path omitting the
trailing '/'. The module checks for URLs that are out of the scope of
the relevant cookie and returns and logs an error if this occurs.

AACookieDomain

The 'Domain' attribute for the session cookie. The default is '',
which will result in the cookie being returned only to the server
running the script. Be aware that some people may treat with suspicion
cookies with domain attributes that are wider than the host setting
the cookie, and that cookies with very short domains (less than 2 or 3
components) may be silently ignored by browsers.

AAForceInteract

If set, users will be required to enter their passwords every time
they are referred to the authentication server and will not be able to
take advantage of the 'single sign-on' features. Setting this may be
apropriate for some applications that have higher than normal security
requirements, but doing so may significantly reduce user
convenience. Possible values are 'On' and 'Off'. Default is 'Off'.

AAFail

If true, sets the fail parameter in any authentication request sent to
the authentication server to 'yes'. This has the effect of requiring
the authentication server itself to report any errors that it
encounters, rather than returning an error indication. Note however
that even with this parameter set errors may be detected by this
module that will result in authentication failing here.

AACancelMsg

If set, this identifies the message that will be displayed on the
users browser if the user cancelled the authentication (assuming that
AAAFail is not set). If unset, a standard message will be
displayed. See the Custom Error Pages section.

AANoCookieMsg

If set, this identifies the message that will be displayed on the
users browser if the browser does not appear to be accepting the
session cookie (without which this module won't work). See the Custom
Error Pages section.

AAlogoutMsg

If set, this identifies the message that will be displayed on the
users browser when they access a logout page. If unset, a standard
message will be displayed. See the Logout page section.

AALogLevel

This directive adjusts the verbosity of the messages from this module
that are recorded in the error logs (see the Apache ErrorLog
directive). When a particular level is specified, messages from all
other levels of higher significance will be reported as well. E.g.,
when AALogLevel info is specified, then messages with log levels of
notice and warn will also be posted. Possible values (from highest to
lowest) are: 'emerg', 'alert', 'crit', 'error', 'warn', 'notice',
'info', 'debug'.  Logging at 'warn' should omit all 'routine'
messages. Logging at 'info' or below is _very_ verbose. The default is
'warn'. Display of error messages is also dependent on the standard
'LogLevel' directive - for example to see 'debug' messages from this
module it is necessary to set both AALogLevel and LogLevel to 'debug'.

AAAlwaysDecode

If this directive is in force for a particular URL then the module
will always attempt to decode the session cookie and store the results
in the environment (see below) even if authentication isn't actively
required. This could be useful for a site that wanted to make
information publicly available but to customise the information if the
user had authenticated, or for a site that wanted to mediate all
accesses through a single point (such as page.php) but wanted to
impose its own authorization decisions on who sees what. For example

      AACookieKey <whatever>
      AAAlwaysDecode On
      <Location /login/>
        AuthType WebAuth
        Require vaid-user
      </Location>

would allow everyone to see anything outside /login/. Visiting
/login/login.html would trigger authentication. Content elsewhere in
the site (foo.cgi, foo.php, etc) can check if the current user is
logged-in, and if so who they are, by inspecting the REMOTE_USER
environment variable. The acceptable values for this directive are
'On' and 'off', the default is 'Off'.
  
2.2. Authentication Information
-------------------------------

Following a successful authentication, Apache's internal view of
current user is set to the user involved. As a result this value can
be logged using the '%u' log format token (which is by default the
third entry in 'Common Log Format'), and will appear as the value of
the environment variable REMOTE_USER in the environment of CGI
programs.
 
In addition, the module provides the following environment variables
to CGI programs. If required these variables can also be logged using
the '%{...}e' log format token.
       
AAISSUE

The time/date at which the current authentication session started.
This date/time is in the format similar to that specified by RFC 3339
except that time-offset is always 'Z' and punctuation is omitted
e.g. "19850412T232050Z" would be 23:20:50 on 12th April 1985.

AALAST

The time/date of the last recorded activity by the user. Note that his
will be the same as AAISSUE unless inactivity timeouts are in use.
This date/time is in the same format as AAISSUE.

AALIFE

The maximum lifetime of the current authentication, in seconds.

AATIMEOUT

The inactivity timeout currently in force, in seconds. 0 implies that
inactivity timeouts are not in use.

AAID

The identifier of the authentication assertion on which the users
authentication is based.

AAPRINCIPAL

Same as REMOTE_USER

AAAUTH

This indicates which authentication type was used if authentication
was established by interaction with the user. This value consists of a
single text token. The only value currently in use is 'pwd'.

AASSO

This indicates which authentication types were previously used if
authentication was established based on previous successful
authentication interactions with the user. This value consists of a a
sequence of text tokens separated by ','. The only value currently in
use is 'pwd'.

2.3. Logout page
----------------

The recommended way to logout from resources protected by Ucam-WebAuth
is to completely quit the browser. However it is possible for the
module to provide a 'virtual' logout page by associating a URL with
the special handler 'AALogout'. This URL need not relate to anything
that exists in the file system. For example:

        <Location "/protected_dir/logout/"> 
                SetHandler AALogout
        </Location>

will cause anything in /protected_dir/logout/, for example 

  http://www.example.com/protected_dir/logout/logout.html

to act as a logout page. Default page content is provided - this can
be overridden as described below in 'Custom Error Pages' using the
AALogoutMsg directive.

2.4. Custom Error Pages
-----------------------

A number of error conditions will be reported by returning an error
page to the user's browser. The module may need to report 'User
declined to authenticate', 'Browser not accepting session cookie',
'Bad Request', and 'General server error'. In addition, the standard
authorisation modules used along with this module may raise
'Authorization Required' if the authenticated user is not actually
allowed access.

In all cases, how these errors are reported can be controlled by using
Apache's 'Custom Error Pages' system. This allows a web designer to
replace the default pages with versions that, for example, more
closely match the look and feel of the site.

Error pages for 'Bad Request', 'General server error' and
'Authorization Required' can be established using the standard
ErrorDocument directive for status codes 400, 500 and 401. A modified
401 page will be provided if a custom one is not defined since the
Apache default is misleading. The default Apache 400 and 500 pages
will be used (and may well be satisfactory) if a custom page is not
defined for these codes.

Custom error pages for 'User declined to authenticate' and 'Browser
not accepting session cookie' can be established using the AACancelMsg
and AANoCookieMsg configuration parameters (see above). Default pages
will be used if custom ones are not defined.

Custom messages can be either a simple text string, a partial URL
starting '/' (in which case it will be assumed to be on the current
server), or a full URL in which case the user will be redirected there
(except for Authorization Required where a full URL will be ignored if
provided). Values for the various '...Msg' directives must be quoted
if they contain spaces.

If the error document is a local one then a number of environment
variables with names starting 'REDIRECT_' will contain additional
information about what went wrong that could be displayed if the
document is something like an SSI page or a CGI script. In particular,
REDIRECT_ERROR_NOTES may contain an error message - however note that
there may be other causes of server errors that will also set
REDIRECT_ERROR_NOTES and displaying these could give away information
useful to an attacker (error messages are in any case logged to the
server error log). Other variables that may be available prefixed by
'REDIRECT_' include those described above under Authentication
Information.

